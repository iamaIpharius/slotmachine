"""This is a simple gambling game
"""


import random


MAX_LINES = 3 #max lines in machine you can bet on
MAX_BET = 100 #max bet
MIN_BET = 1 #min bet

ROWS = 3 #rows in machine "screen"
COLS =3 #cols in machine "screen"

symbol_count = { #symbols in each wheel
    "A": 2,
    "B": 4,
    "C": 6,
    "D": 8,
}

symbol_value = { #value of symbols
    "A": 5,
    "B": 4,
    "C": 3,
    "D": 2,
}
def check_winnings(columns: list, lines: int, bet: int, values: dict) -> int|list:
    """Functions checks winning rows and count win money

    Args:
        columns (list): generated by get_slot_machine_spin slots or "screen"
        lines (int): betted lines
        bet (int): bet
        values (dict): dict of values of each symbol

    Returns:
        int|list: winning money and list of numbers of winnig lines (from top to bottom)
    """
    winnings = 0
    winning_lines = []
    for line in range(lines):
        symbol = columns[0][line]
        for column in columns:
            symbol_to_check = column[line]
            if symbol != symbol_to_check:
                break
        else:
            winnings += values[symbol] * bet
            winning_lines.append(line + 1)

    return winnings, winning_lines


def get_slot_machine_spin(rows: int, cols: int, symbols: dict) -> list:
    """Randomly chooses result of spinning wheels

    Args:
        rows (int): const max rows
        cols (int): const max cols
        symbols (dict): symbols count

    Returns:
        list: list of chosen columns
    """
    all_symbols = []
    for symbol, symbol_count in symbols.items():
        for _ in range(symbol_count):
            all_symbols.append(symbol)
    columns = []
    for _ in range(cols):
        column = []
        current_symbols = all_symbols[:]
        for _ in range(rows):
            value = random.choice(current_symbols)
            current_symbols.remove(value)
            column.append(value)
        columns.append(column)

    return columns

def print_slot_machine(columns: list):
    """Print result of spining 

    Args:
        columns (list): chosen columns to print
    """
    for row in range(len(columns[0])):
        for i, column in enumerate(columns):
            if i != len(columns) - 1:
                print(column[row], end=" | ")
            else:
                print(column[row], end="")
                
        print()

def deposit() -> int:
    """Fun writes deposit from user

    Returns:
        int: amount of deposit
    """
    while True:
        amount = input("Would you like to deposit? $")
        if amount.isdigit():
            amount = int(amount)
            if amount > 0:
                break
            else:
                print("Amount must be greater than 0.")
        else:
            print("Please enter a number.")
    return amount

def get_number_of_lines() -> int:
    """Get from uxer number of lines to bet on

    Returns:
        int: number of lines to bet on
    """
    while True:
        lines = input(f"Enter the number of lines to bet on (1-{MAX_LINES}) ? ")
        if lines.isdigit():
            lines = int(lines)
            if 1 <= lines <= MAX_LINES:
                break
            else:
                print("Enter valid number of lines.")
        else:
            print("Please enter a number.")
    return lines

def get_bet() -> int:
    """Get bet from user

    Returns:
        int: amount of bet
    """
    while True:
        amount = input("Would you like to bet on each line? $")
        if amount.isdigit():
            amount = int(amount)
            if MIN_BET <= amount <= MAX_BET:
                break
            else:
                print(f"Amount must be between ${MIN_BET} and ${MAX_BET}.")
        else:
            print("Please enter a number.")
    return amount


def spin(balance: int) -> int:
    """gets bet and lines from user, 
    then launch get_slot_machine_spin function and print_slot_machine function,
    then check_winnings function and returns amount of won or lost money

    Args:
        balance (int): balance of money

    Returns:
        int: amount of won or lost money
    """
    lines = get_number_of_lines()
    while True:
        bet = get_bet()
        total_bet = bet * lines

        if total_bet > balance:
            print(f"You don't have enough balance to bet, your current balance is ${balance}.")
        else:
            break

    print(f"You are betting ${bet} on {lines}. Total bet is equal ${total_bet}.")

    slots = get_slot_machine_spin(ROWS, COLS, symbol_count)
    print_slot_machine(slots)
    winnigs, winning_lines = check_winnings(slots, lines, bet, symbol_value)
    print(f"You won ${winnigs}.")
    print(f"You won on lines:", *winning_lines)
    return winnigs - total_bet


def main():
    """Starts the game, gets deposit from user and launches spin function
    """
    balance = deposit()
    while True:
        print(f"Current balance is ${balance}")
        answer = input("Press any key to play (q to quit). ")
        if answer == "q":
            break
        
        balance += spin(balance)
    print(f"You left with ${balance}")

main()